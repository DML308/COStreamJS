
import Matrix;

Matrix img[8] = { 
    [ [0,0,0], [0,0,0], [0,0,0] ],
    [ [1,1,1], [1,1,1], [1,1,1] ],
    [ [2,2,2], [2,2,2], [2,2,2] ],
};                

Matrix kernel = [ 
    [-1,0], 
    [0,1] 
];

composite Convolve(output stream<Matrix x>Out,input stream<Matrix x>In)
{
    param
        int size1,int size2;
    Out = B(In)
    {
        work
        {
            int kernel_heigh = kernel.rows();                  //获取卷积核(滤波)的高度
            int kernel_width = kernel.cols();               //获取卷积核(滤波)的宽度

            int conv_heigh = In[0].x.rows() - kernel.rows() + 1;    //确定卷积结果的大小
            int conv_width = In[0].x.cols() - kernel.cols() + 1;

            Matrix conv = Matrix.zeros(conv_heigh,conv_width);

            int i,j;
            for(i=0;i<conv_heigh;i++){                  //逐点相乘并求和得到每一个点
                for(j=0;j<conv_width;j++){
                    conv[i,j] = In[0].x[i:i + kernel_heigh,j:j + kernel_width ].cwiseProduct(kernel).sum() ;
                }
            }
            Out[0].x = conv;
        }
        window{
            In  sliding(1,1);
            Out tumbling(1);
        }
    };
}

composite Main(){
    stream<Matrix x>S,P;
    S=Source(){
        int i;
        init{ }
        work{
            for(i = 0;i < 3;i++){
                S[i].x = img[i];
            }
        }
        window{
            S tumbling(8);
        }
    };
    P = Convolve(S)(88,99);
    Sink(P){
        work{
            println(P[0].x);
        }
        window{
            P sliding(1,1);
        }
    };
}
