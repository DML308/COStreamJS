/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[5,90,91,92,93,94,95],$V7=[1,19],$V8=[1,20],$V9=[18,19],$Va=[10,14],$Vb=[2,10],$Vc=[1,28],$Vd=[1,27],$Ve=[1,26],$Vf=[1,29],$Vg=[10,14,16,19,20,21,27],$Vh=[5,10,18,19,27,29,38,40,43,44,45,46,47,48,49,50,51,53,54,58,59,62,63,64,65,90,91,92,93,94,95],$Vi=[1,46],$Vj=[1,49],$Vk=[1,47],$Vl=[1,48],$Vm=[1,38],$Vn=[1,39],$Vo=[1,42],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,58],$Vt=[1,73],$Vu=[1,71],$Vv=[1,72],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[10,14,20,23,29,39],$VF=[1,92],$VG=[1,93],$VH=[1,90],$VI=[1,91],$VJ=[1,94],$VK=[1,95],$VL=[1,96],$VM=[1,97],$VN=[1,98],$VO=[1,99],$VP=[1,100],$VQ=[1,101],$VR=[1,102],$VS=[1,103],$VT=[1,104],$VU=[1,105],$VV=[1,107],$VW=[10,14,20,23,29,39,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84],$VX=[2,77],$VY=[10,14,16,20,23,29,39,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86],$VZ=[10,14,16,19,20,21,23,29,39,57,58,59,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86],$V_=[18,19,53,54,58,59,62,63,64,65],$V$=[14,20],$V01=[10,14,29],$V11=[10,18,19,27,29,38,40,43,45,46,47,48,49,50,51,53,54,58,59,62,63,64,65,90,91,92,93,94,95],$V21=[10,18,19,27,29,38,40,43,44,45,46,47,48,49,50,51,53,54,58,59,62,63,64,65,90,91,92,93,94,95],$V31=[10,18,19,20,27,29,38,40,43,44,45,46,47,48,49,50,51,53,54,58,59,62,63,64,65,90,91,92,93,94,95],$V41=[1,132],$V51=[10,14,20,23,39],$V61=[14,29],$V71=[10,14,20,23,29,39,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,84],$V81=[10,14,20,23,29,39,70,71,72,73,74,75,76,77,78,81,82,84],$V91=[10,14,20,23,29,39,70,71,72,77,78,81,82,84],$Va1=[10,14,20,23,29,39,70,71,72,73,74,75,76,77,78,79,80,81,82,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"prog_start":3,"translation_unit":4,"EOF":5,"external_declaration":6,"function_definition":7,"declaration":8,"declaring_list":9,";":10,"type_specifier":11,"init_declarator_list":12,"init_declarator":13,",":14,"declarator":15,"=":16,"initializer":17,"IDENTIFIER":18,"(":19,")":20,"[":21,"constant_expression":22,"]":23,"parameter_type_list":24,"identifier_list":25,"assignment_expression":26,"{":27,"initializer_list":28,"}":29,"compound_statement":30,"parameter_declaration":31,"statement":32,"labeled_statement":33,"expression_statement":34,"selection_statement":35,"iteration_statement":36,"jump_statement":37,"CASE":38,":":39,"DEFAULT":40,"statement_list":41,"expression":42,"IF":43,"ELSE":44,"SWITCH":45,"WHILE":46,"DO":47,"FOR":48,"CONTINUE":49,"BREAK":50,"RETURN":51,"primary_expression":52,"NUMBER":53,"STRING_LITERAL":54,"postfix_expression":55,"argument_expression_list":56,".":57,"++":58,"--":59,"unary_expression":60,"unary_operator":61,"+":62,"-":63,"~":64,"!":65,"exp":66,"*":67,"/":68,"%":69,"^":70,"|":71,"&":72,"<":73,">":74,"<=":75,">=":76,"==":77,"!=":78,"<<":79,">>":80,"||":81,"&&":82,"conditional_expression":83,"?":84,"assignment_operator":85,"ASSIGNMENT_OPERATOR":86,"lblock":87,"rblock":88,"basic_type_name":89,"CONST":90,"INT":91,"LONG":92,"FLOAT":93,"DOUBLE":94,"STRING":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",14:",",16:"=",18:"IDENTIFIER",19:"(",20:")",21:"[",23:"]",27:"{",29:"}",38:"CASE",39:":",40:"DEFAULT",43:"IF",44:"ELSE",45:"SWITCH",46:"WHILE",47:"DO",48:"FOR",49:"CONTINUE",50:"BREAK",51:"RETURN",53:"NUMBER",54:"STRING_LITERAL",57:".",58:"++",59:"--",62:"+",63:"-",64:"~",65:"!",67:"*",68:"/",69:"%",70:"^",71:"|",72:"&",73:"<",74:">",75:"<=",76:">=",77:"==",78:"!=",79:"<<",80:">>",81:"||",82:"&&",84:"?",86:"ASSIGNMENT_OPERATOR",90:"CONST",91:"INT",92:"LONG",93:"FLOAT",94:"DOUBLE",95:"STRING"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[8,2],[9,2],[12,1],[12,3],[13,1],[13,3],[15,1],[15,3],[15,4],[15,3],[15,4],[15,4],[15,3],[25,1],[25,3],[17,1],[17,3],[17,4],[28,1],[28,3],[7,3],[24,1],[24,3],[31,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[33,4],[33,3],[30,2],[30,3],[41,1],[41,2],[34,1],[34,2],[35,5],[35,7],[35,5],[36,5],[36,7],[36,6],[36,7],[37,2],[37,2],[37,2],[37,3],[52,1],[52,1],[52,1],[52,3],[55,1],[55,4],[55,3],[55,4],[55,3],[55,2],[55,2],[56,1],[56,3],[60,1],[60,2],[60,2],[60,2],[61,1],[61,1],[61,1],[61,1],[66,1],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[83,1],[83,5],[26,1],[26,3],[85,1],[85,1],[42,1],[42,3],[22,1],[87,1],[88,1],[11,1],[11,2],[89,1],[89,1],[89,2],[89,1],[89,1],[89,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1] 
break;
case 2: case 8:
 this.$ = [$$[$0]] 
break;
case 3: case 9: case 28:
 this.$.push($$[$0]) 
break;
case 6:
 this.$ = $$[$0-1] 
break;
case 7:
 this.$ = new declareNode($$[$0-1],$$[$0],mergeLoc(_$[$0-1],_$[$0])) 
break;
case 10:
 this.$ = $$[$0]      
break;
case 11:
 this.$ = new declarator($$[$0-2],mergeLoc(_$[$0-2],_$[$0]),$$[$0-1],$$[$0])   
break;
case 12:
 this.$ = $$[$0]                                         
break;
case 13:
 error("暂未支持该种declarator的写法")              
break;
case 14: case 16: case 17:
 this.$ = new declarator($$[$0-3],mergeLoc(_$[$0-3],_$[$0]),$$[$0-2],$$[$0-1],$$[$0])
break;
case 18:
 this.$ = new declarator($$[$0-2],_$[$0-2],$$[$0-1],undefined,$$[$0])      
break;
case 19:
 this.$ = $$[$0] 
break;
case 20:
 this.$ = $$[$0-2] instanceof Array ? $$[$0-2].concat($$[$0]) : [$$[$0-2],$$[$0]] 
break;
case 26:
 this.$ = new function_definition($$[$0-2],$$[$0-1],$$[$0],mergeLoc(_$[$0-2],_$[$0])) 
break;
case 27:
 this.$ = [$$[$0]]   
break;
case 29:
 this.$ = new parameter_declaration($$[$0-1],$$[$0],mergeLoc(_$[$0-1],_$[$0])) 
break;
case 39:
 this.$ = new blockNode($$[$0-1],undefined,$$[$0],mergeLoc(_$[$0-1],_$[$0])) 
break;
case 40:
 this.$ = new blockNode($$[$0-2],$$[$0-1],$$[$0],mergeLoc(_$[$0-2],_$[$0])) 
break;
case 41:
 this.$= [$$[$0]]   
break;
case 42:
 this.$.push($$[$0])
break;
case 57: case 58:
 this.$ = new constantNode($$[$0],_$[$0]) 
break;
case 59:
 this.$ = new parenNode($$[$0-1],_$[$0-2])    
break;
case 65: case 66: case 70: case 71: case 72:
 this.$ = new unaryNode($$[$0-1],$$[$0],_$[$0-1]) 
break;
case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95:
 this.$ = new binopNode($$[$0-2],$$[$0-1],$$[$0],_$[$0-1]) 
break;
case 97:
 this.$ = new ternaryNode($$[$0-4],$$[$0-2],$$[$0],mergeLoc(_$[$0-4],_$[$0])) 
break;
case 99:
 this.$ = new binopNode($$[$0-2],$$[$0-1],$$[$0],mergeLoc(_$[$0-2],_$[$0])) 
break;
case 103:

         if($$[$0-2] instanceof Array) this.$.push($$[$0])
         else if($$[$0-2] instanceof expNode) this.$ = [$$[$0-2],$$[$0]]
         else error("error at `expression ','` ") 
      
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:7,11:6,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},{1:[3]},{5:[1,15],6:16,7:4,8:5,9:7,11:6,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},o($V6,[2,2]),o($V6,[2,4]),o($V6,[2,5]),{12:18,13:21,15:17,18:$V7,19:$V8},{10:[1,22]},o($V9,[2,107]),{89:23,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},o($V9,[2,109]),o($V9,[2,110],{92:[1,24]}),o($V9,[2,112]),o($V9,[2,113]),o($V9,[2,114]),{1:[2,1]},o($V6,[2,3]),o($Va,$Vb,{30:25,16:$Vc,19:$Vd,21:$Ve,27:$Vf}),{10:[2,7],14:[1,30]},o($Vg,[2,12]),{15:31,18:$V7,19:$V8},o($Va,[2,8]),o($Vh,[2,6]),o($V9,[2,108]),o($V9,[2,111]),o($V6,[2,26]),{18:$Vi,19:$Vj,22:32,23:[1,33],52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:34},{11:55,18:[1,54],20:[1,52],24:50,25:51,31:53,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},{17:56,18:$Vi,19:$Vj,26:57,27:$Vs,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},{8:70,9:7,10:$Vt,11:84,18:$Vi,19:$Vj,26:83,27:$Vf,29:[1,61],30:65,32:63,33:64,34:66,35:67,36:68,37:69,38:$Vu,40:$Vv,41:62,42:74,43:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},{13:85,15:86,18:$V7,19:$V8},{19:$Vd,20:[1,87],21:$Ve},{23:[1,88]},o($Vg,[2,15]),o([23,39],[2,104]),o($VE,[2,96],{62:$VF,63:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:[1,106],82:$VV,84:[1,89]}),o($VW,$VX),o($VY,[2,69],{19:[1,109],21:[1,108],57:[1,110],58:[1,111],59:[1,112]}),{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:113,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:114,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:115,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr},o($VZ,[2,60]),o($V_,[2,73]),o($V_,[2,74]),o($V_,[2,75]),o($V_,[2,76]),o($VZ,[2,56]),o($VZ,[2,57]),o($VZ,[2,58]),{18:$Vi,19:$Vj,26:83,42:116,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},{14:[1,118],20:[1,117]},{14:[1,120],20:[1,119]},o($Vg,[2,18]),o($V$,[2,27]),o($V$,[2,19]),{15:121,18:$V7,19:$V8},o($Va,[2,11]),o($V01,[2,21]),{17:123,18:$Vi,19:$Vj,26:57,27:$Vs,28:122,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},o($VE,[2,98]),o($VW,$VX,{85:124,16:[1,125],86:[1,126]}),o($Vh,[2,39]),{8:70,9:7,10:$Vt,11:84,18:$Vi,19:$Vj,26:83,27:$Vf,29:[1,127],30:65,32:128,33:64,34:66,35:67,36:68,37:69,38:$Vu,40:$Vv,42:74,43:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},o($V11,[2,41]),o($V21,[2,30]),o($V21,[2,31]),o($V21,[2,32]),o($V21,[2,33]),o($V21,[2,34]),o($V21,[2,35]),o($V21,[2,36]),{18:$Vi,19:$Vj,22:129,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:34},{39:[1,130]},o($V31,[2,43]),{10:[1,131],14:$V41},{19:[1,133]},{19:[1,134]},{19:[1,135]},{8:70,9:7,10:$Vt,11:84,18:$Vi,19:$Vj,26:83,27:$Vf,30:65,32:136,33:64,34:66,35:67,36:68,37:69,38:$Vu,40:$Vv,42:74,43:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},{19:[1,137]},{10:[1,138]},{10:[1,139]},{10:[1,140],18:$Vi,19:$Vj,26:83,42:141,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},o($V51,[2,102]),{12:18,13:21,15:86,18:$V7,19:$V8},o($Va,[2,9]),o($Va,$Vb,{16:$Vc,19:$Vd,21:$Ve}),o($Vg,[2,13]),o($Vg,[2,14]),{18:$Vi,19:$Vj,26:83,42:142,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:143},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:144},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:145},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:146},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:147},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:148},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:149},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:150},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:151},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:152},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:153},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:154},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:155},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:156},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:157},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:158},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:159},{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:160},{18:$Vi,19:$Vj,26:83,42:161,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},{18:$Vi,19:$Vj,20:[1,162],26:164,52:41,53:$Vk,54:$Vl,55:37,56:163,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},{18:[1,165]},o($VZ,[2,65]),o($VZ,[2,66]),o($VY,[2,70]),o($VY,[2,71]),o($VY,[2,72]),{14:$V41,20:[1,166]},o($Vg,[2,16]),{11:55,31:167,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},o($Vg,[2,17]),{18:[1,168]},o($V$,[2,29],{19:$Vd,21:$Ve}),{14:[1,170],29:[1,169]},o($V61,[2,24]),{18:$Vi,19:$Vj,26:171,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},o($V_,[2,100]),o($V_,[2,101]),o($Vh,[2,40]),o($V11,[2,42]),{39:[1,172]},{8:70,9:7,10:$Vt,11:84,18:$Vi,19:$Vj,26:83,27:$Vf,30:65,32:173,33:64,34:66,35:67,36:68,37:69,38:$Vu,40:$Vv,42:74,43:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},o($V31,[2,44]),{18:$Vi,19:$Vj,26:174,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},{18:$Vi,19:$Vj,26:83,42:175,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},{18:$Vi,19:$Vj,26:83,42:176,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},{18:$Vi,19:$Vj,26:83,42:177,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},{46:[1,178]},{10:$Vt,18:$Vi,19:$Vj,26:83,34:179,42:74,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},o($V21,[2,52]),o($V21,[2,53]),o($V21,[2,54]),{10:[1,180],14:$V41},{14:$V41,39:[1,181]},o($VW,[2,78]),o($VW,[2,79]),o($V71,[2,80],{67:$VH,68:$VI,69:$VJ}),o($V71,[2,81],{67:$VH,68:$VI,69:$VJ}),o($VW,[2,82]),o([10,14,20,23,29,39,70,71,81,82,84],[2,83],{62:$VF,63:$VG,67:$VH,68:$VI,69:$VJ,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU}),o([10,14,20,23,29,39,71,81,82,84],[2,84],{62:$VF,63:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU}),o([10,14,20,23,29,39,70,71,72,81,82,84],[2,85],{62:$VF,63:$VG,67:$VH,68:$VI,69:$VJ,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU}),o($V81,[2,86],{62:$VF,63:$VG,67:$VH,68:$VI,69:$VJ,79:$VT,80:$VU}),o($V81,[2,87],{62:$VF,63:$VG,67:$VH,68:$VI,69:$VJ,79:$VT,80:$VU}),o($V81,[2,88],{62:$VF,63:$VG,67:$VH,68:$VI,69:$VJ,79:$VT,80:$VU}),o($V81,[2,89],{62:$VF,63:$VG,67:$VH,68:$VI,69:$VJ,79:$VT,80:$VU}),o($V91,[2,90],{62:$VF,63:$VG,67:$VH,68:$VI,69:$VJ,73:$VN,74:$VO,75:$VP,76:$VQ,79:$VT,80:$VU}),o($V91,[2,91],{62:$VF,63:$VG,67:$VH,68:$VI,69:$VJ,73:$VN,74:$VO,75:$VP,76:$VQ,79:$VT,80:$VU}),o($Va1,[2,92],{62:$VF,63:$VG,67:$VH,68:$VI,69:$VJ}),o($Va1,[2,93],{62:$VF,63:$VG,67:$VH,68:$VI,69:$VJ}),o([10,14,20,23,29,39,81,84],[2,94],{62:$VF,63:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,82:$VV}),o([10,14,20,23,29,39,81,82,84],[2,95],{62:$VF,63:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU}),{14:$V41,23:[1,182]},o($VZ,[2,62]),{14:[1,184],20:[1,183]},o($V$,[2,67]),o($VZ,[2,64]),o($VZ,[2,59]),o($V$,[2,28]),o($V$,[2,20]),o($V01,[2,22]),{17:186,18:$Vi,19:$Vj,26:57,27:$Vs,29:[1,185],52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},o($VE,[2,99]),{8:70,9:7,10:$Vt,11:84,18:$Vi,19:$Vj,26:83,27:$Vf,30:65,32:187,33:64,34:66,35:67,36:68,37:69,38:$Vu,40:$Vv,42:74,43:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},o($V21,[2,38]),o($V51,[2,103]),{14:$V41,20:[1,188]},{14:$V41,20:[1,189]},{14:$V41,20:[1,190]},{19:[1,191]},{10:$Vt,18:$Vi,19:$Vj,26:83,34:192,42:74,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},o($V21,[2,55]),{18:$Vi,19:$Vj,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:36,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:193},o($VZ,[2,61]),o($VZ,[2,63]),{18:$Vi,19:$Vj,26:194,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},o($V01,[2,23]),o($V61,[2,25]),o($V21,[2,37]),{8:70,9:7,10:$Vt,11:84,18:$Vi,19:$Vj,26:83,27:$Vf,30:65,32:195,33:64,34:66,35:67,36:68,37:69,38:$Vu,40:$Vv,42:74,43:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},{8:70,9:7,10:$Vt,11:84,18:$Vi,19:$Vj,26:83,27:$Vf,30:65,32:196,33:64,34:66,35:67,36:68,37:69,38:$Vu,40:$Vv,42:74,43:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},{8:70,9:7,10:$Vt,11:84,18:$Vi,19:$Vj,26:83,27:$Vf,30:65,32:197,33:64,34:66,35:67,36:68,37:69,38:$Vu,40:$Vv,42:74,43:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},{18:$Vi,19:$Vj,26:83,42:198,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},{18:$Vi,19:$Vj,20:[1,199],26:83,42:200,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59},o($VE,[2,97]),o($V$,[2,68]),o($V11,[2,45],{44:[1,201]}),o($V21,[2,47]),o($V21,[2,48]),{14:$V41,20:[1,202]},{8:70,9:7,10:$Vt,11:84,18:$Vi,19:$Vj,26:83,27:$Vf,30:65,32:203,33:64,34:66,35:67,36:68,37:69,38:$Vu,40:$Vv,42:74,43:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},{14:$V41,20:[1,204]},{8:70,9:7,10:$Vt,11:84,18:$Vi,19:$Vj,26:83,27:$Vf,30:65,32:205,33:64,34:66,35:67,36:68,37:69,38:$Vu,40:$Vv,42:74,43:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},{10:[1,206]},o($V21,[2,50]),{8:70,9:7,10:$Vt,11:84,18:$Vi,19:$Vj,26:83,27:$Vf,30:65,32:207,33:64,34:66,35:67,36:68,37:69,38:$Vu,40:$Vv,42:74,43:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:41,53:$Vk,54:$Vl,55:37,58:$Vm,59:$Vn,60:60,61:40,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:35,83:59,89:8,90:$V0,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5},o($V21,[2,46]),o($V21,[2,49]),o($V21,[2,51])],
defaultActions: {15:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 53
break;
case 2:return 54
break;
case 3:return 95
break;
case 4:return 91
break;
case 5:return 94
break;
case 6:return 93
break;
case 7:return 92
break;
case 8:return 90
break;
case 9:return 'DEFINE'
break;
case 10:return 46
break;
case 11:return 48
break;
case 12:return 50
break;
case 13:return 49
break;
case 14:return 45
break;
case 15:return 38
break;
case 16:return 40
break;
case 17:return 43
break;
case 18:return 44
break;
case 19:return 47
break;
case 20:return 51
break;
case 21:return 'COMPOSITE'
break;
case 22:return 'INPUT'
break;
case 23:return 'OUTPUT'
break;
case 24:return 'STREAM'
break;
case 25:return 'FILEREADER'
break;
case 26:return 'FILEWRITER'
break;
case 27:return 'ADD'
break;
case 28:return 'PARAM'
break;
case 29:return 'INIT'
break;
case 30:return 'WORK'
break;
case 31:return 'WINDOW'
break;
case 32:return 'TUMBLING'
break;
case 33:return 'SLIDING'
break;
case 34:return 'SPLITJOIN'
break;
case 35:return 'PIPELINE'
break;
case 36:return 'SPLIT'
break;
case 37:return 'JOIN'
break;
case 38:return 'DUPLICATE'
break;
case 39:return 'ROUNDROBIN'
break;
case 40:return 18
break;
case 41:return yy_.yytext
break;
case 42:return 86
break;
case 43:return yy_.yytext
break;
case 44:return 5
break;
case 45:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:(0[xb])?[0-9]+(\.[0-9]+)?([Ee][+-]?[0-9]+?)?\b)/,/^(?:('[^']*'|"[^\"]*"))/,/^(?:string\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:long\b)/,/^(?:const\b)/,/^(?:define\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:do\b)/,/^(?:return\b)/,/^(?:composite\b)/,/^(?:input\b)/,/^(?:output\b)/,/^(?:stream\b)/,/^(?:FileReader\b)/,/^(?:FileWriter\b)/,/^(?:add\b)/,/^(?:param\b)/,/^(?:init\b)/,/^(?:work\b)/,/^(?:window\b)/,/^(?:tumbling\b)/,/^(?:sliding\b)/,/^(?:splitjoin\b)/,/^(?:pipeline\b)/,/^(?:split\b)/,/^(?:join\b)/,/^(?:duplicate\b)/,/^(?:roundrobin\b)/,/^(?:[A-z_][0-9A-z]*)/,/^(?:##|\+\+|--|>>|>>|<=|>=|==|!=|&&|\|\|)/,/^(?:\*=|\/=|\+=|-=|<<=|>>=|&=|\^=|\|=)/,/^(?:[-*+\/%&|~!()\[\]{}'"#,\.?:;<>=])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}