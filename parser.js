/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[5,9,89,90,91,92,93,94],$V8=[1,20],$V9=[1,21],$Va=[19,20],$Vb=[11,15],$Vc=[2,11],$Vd=[1,29],$Ve=[1,28],$Vf=[1,27],$Vg=[1,30],$Vh=[11,15,17,20,21,22,28],$Vi=[5,9,11,19,20,28,30,39,41,44,45,46,47,48,49,50,51,52,54,55,59,60,63,64,65,66,89,90,91,92,93,94],$Vj=[1,47],$Vk=[1,50],$Vl=[1,48],$Vm=[1,49],$Vn=[1,39],$Vo=[1,40],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,46],$Vt=[1,59],$Vu=[1,74],$Vv=[1,72],$Vw=[1,73],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[11,15,21,24,30,40],$VG=[1,93],$VH=[1,94],$VI=[1,91],$VJ=[1,92],$VK=[1,95],$VL=[1,96],$VM=[1,97],$VN=[1,98],$VO=[1,99],$VP=[1,100],$VQ=[1,101],$VR=[1,102],$VS=[1,103],$VT=[1,104],$VU=[1,105],$VV=[1,106],$VW=[1,108],$VX=[11,15,21,24,30,40,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85],$VY=[2,78],$VZ=[11,15,17,21,24,30,40,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,87],$V_=[11,15,17,20,21,22,24,30,40,58,59,60,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,87],$V$=[19,20,54,55,59,60,63,64,65,66],$V01=[15,21],$V11=[11,15,30],$V21=[11,19,20,28,30,39,41,44,46,47,48,49,50,51,52,54,55,59,60,63,64,65,66,89,90,91,92,93,94],$V31=[11,19,20,28,30,39,41,44,45,46,47,48,49,50,51,52,54,55,59,60,63,64,65,66,89,90,91,92,93,94],$V41=[11,19,20,21,28,30,39,41,44,45,46,47,48,49,50,51,52,54,55,59,60,63,64,65,66,89,90,91,92,93,94],$V51=[1,133],$V61=[11,15,21,24,40],$V71=[15,30],$V81=[11,15,21,24,30,40,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,85],$V91=[11,15,21,24,30,40,71,72,73,74,75,76,77,78,79,82,83,85],$Va1=[11,15,21,24,30,40,71,72,73,78,79,82,83,85],$Vb1=[11,15,21,24,30,40,71,72,73,74,75,76,77,78,79,80,81,82,83,85];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"prog_start":3,"translation_unit":4,"EOF":5,"external_declaration":6,"function_definition":7,"declaration":8,"composite_definition":9,"declaring_list":10,";":11,"type_specifier":12,"init_declarator_list":13,"init_declarator":14,",":15,"declarator":16,"=":17,"initializer":18,"IDENTIFIER":19,"(":20,")":21,"[":22,"constant_expression":23,"]":24,"parameter_type_list":25,"identifier_list":26,"assignment_expression":27,"{":28,"initializer_list":29,"}":30,"compound_statement":31,"parameter_declaration":32,"statement":33,"labeled_statement":34,"expression_statement":35,"selection_statement":36,"iteration_statement":37,"jump_statement":38,"CASE":39,":":40,"DEFAULT":41,"statement_list":42,"expression":43,"IF":44,"ELSE":45,"SWITCH":46,"WHILE":47,"DO":48,"FOR":49,"CONTINUE":50,"BREAK":51,"RETURN":52,"primary_expression":53,"NUMBER":54,"STRING_LITERAL":55,"postfix_expression":56,"argument_expression_list":57,".":58,"++":59,"--":60,"unary_expression":61,"unary_operator":62,"+":63,"-":64,"~":65,"!":66,"exp":67,"*":68,"/":69,"%":70,"^":71,"|":72,"&":73,"<":74,">":75,"<=":76,">=":77,"==":78,"!=":79,"<<":80,">>":81,"||":82,"&&":83,"conditional_expression":84,"?":85,"assignment_operator":86,"ASSIGNMENT_OPERATOR":87,"basic_type_name":88,"CONST":89,"INT":90,"LONG":91,"FLOAT":92,"DOUBLE":93,"STRING":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"composite_definition",11:";",15:",",17:"=",19:"IDENTIFIER",20:"(",21:")",22:"[",24:"]",28:"{",30:"}",39:"CASE",40:":",41:"DEFAULT",44:"IF",45:"ELSE",46:"SWITCH",47:"WHILE",48:"DO",49:"FOR",50:"CONTINUE",51:"BREAK",52:"RETURN",54:"NUMBER",55:"STRING_LITERAL",58:".",59:"++",60:"--",63:"+",64:"-",65:"~",66:"!",68:"*",69:"/",70:"%",71:"^",72:"|",73:"&",74:"<",75:">",76:"<=",77:">=",78:"==",79:"!=",80:"<<",81:">>",82:"||",83:"&&",85:"?",87:"ASSIGNMENT_OPERATOR",89:"CONST",90:"INT",91:"LONG",92:"FLOAT",93:"DOUBLE",94:"STRING"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[8,2],[10,2],[13,1],[13,3],[14,1],[14,3],[16,1],[16,3],[16,4],[16,3],[16,4],[16,4],[16,3],[26,1],[26,3],[18,1],[18,3],[18,4],[29,1],[29,3],[7,3],[25,1],[25,3],[32,2],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[34,4],[34,3],[31,2],[31,3],[42,1],[42,2],[35,1],[35,2],[36,5],[36,7],[36,5],[37,5],[37,7],[37,6],[37,7],[38,2],[38,2],[38,2],[38,3],[53,1],[53,1],[53,1],[53,3],[56,1],[56,4],[56,3],[56,4],[56,3],[56,2],[56,2],[57,1],[57,3],[61,1],[61,2],[61,2],[61,2],[62,1],[62,1],[62,1],[62,1],[67,1],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[84,1],[84,5],[27,1],[27,3],[86,1],[86,1],[43,1],[43,3],[23,1],[12,1],[12,2],[88,1],[88,1],[88,2],[88,1],[88,1],[88,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1] 
break;
case 2: case 9:
 this.$ = [$$[$0]] 
break;
case 3: case 10: case 29: case 69:
 this.$.push($$[$0]) 
break;
case 7: case 23: case 45:
 this.$ = $$[$0-1] 
break;
case 8:
 this.$ = new declareNode(this._$,$$[$0-1],$$[$0]) 
break;
case 11:
 this.$ = $$[$0]      
break;
case 12:
 this.$ = new declarator(this._$,$$[$0-2],$$[$0-1]);this.$.initializer = $$[$0] 
break;
case 13:
 this.$ = $$[$0]                                                 
break;
case 14:
 error("暂未支持该种declarator的写法")                      
break;
case 15: case 17: case 18:
 this.$ = new declarator(this._$,$$[$0-3],$$[$0-2],$$[$0-1],$$[$0])        
break;
case 16: case 19:
 this.$ = new declarator(this._$,$$[$0-2],$$[$0-1],undefined,$$[$0]) 
break;
case 20: case 25: case 103:
 this.$ = $$[$0] 
break;
case 21:
 this.$ = $$[$0-2] instanceof Array ? $$[$0-2].concat($$[$0]) : [$$[$0-2],$$[$0]] 
break;
case 24:
 this.$ = $$[$0-2] 
break;
case 26:
 this.$ = $$[$0-2] instanceof Array ? $$[$0-2].concat($$[$0]) : [$$[$0-2],$$[$0]]
break;
case 27:
 this.$ = new function_definition(this._$,$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 28: case 68:
 this.$ = [$$[$0]]   
break;
case 30:
 this.$ = new parameter_declaration(this._$,$$[$0-1],$$[$0]) 
break;
case 38:
 this.$ = new labeled_statement(this._$,$$[$0-3],$$[$0-2],$$[$0-1],$$[$0])
break;
case 39:
 this.$ = new labeled_statement(this._$,$$[$0-2],undefined,$$[$0-1],$$[$0])
break;
case 40:
 this.$ = new blockNode(this._$,$$[$0-1],undefined,$$[$0]) 
break;
case 41:
 this.$ = new blockNode(this._$,$$[$0-2],$$[$0-1],$$[$0]) 
break;
case 42:
 this.$ = $$[$0] ? [$$[$0]] : []   
break;
case 43:
 if($$[$0]) this.$.push($$[$0])    
break;
case 44:
 this.$ = undefined 
break;
case 46: case 48:
 this.$ = new selection_statement(this._$,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0])        
break;
case 47:
 this.$ = new selection_statement(this._$,$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0])  
break;
case 49:
 this.$ = new whileNode(this._$,$$[$0-2],$$[$0]) 
break;
case 50:
 this.$ = new doNode(this._$,$$[$0-2],$$[$0-5])    
break;
case 51:
 this.$ = new forNode(this._$,$$[$0-3],$$[$0-2],undefined,$$[$0])    
break;
case 52:
 this.$ = new forNode(this._$,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0]) 
break;
case 53: case 54: case 55:
 this.$ = new jump_statement(this._$,$$[$0-1]) 
break;
case 56:
 this.$ = new jump_statement(this._$,$$[$0-2],$$[$0-1]) 
break;
case 58: case 59:
 this.$ = new constantNode(this._$,$$[$0]) 
break;
case 60:
 this.$ = new parenNode(this._$,$$[$0-1])    
break;
case 62:
 this.$ = new arrayNode(this._$,$$[$0-3],$$[$0-1])    
break;
case 64:
 this.$ = new callNode(this._$,$$[$0-3],$$[$0-1])     
break;
case 65: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 100:
 this.$ = new binopNode(this._$,$$[$0-2],$$[$0-1],$$[$0]) 
break;
case 66: case 67:
 this.$ = new unaryNode(this._$,$$[$0-1],$$[$0])    
break;
case 71: case 72: case 73:
 this.$ = new unaryNode(this._$,$$[$0-1],$$[$0]) 
break;
case 98:
 this.$ = new ternaryNode(this._$,$$[$0-4],$$[$0-2],$$[$0]) 
break;
case 104:

         if($$[$0-2] instanceof Array) this.$.push($$[$0])
         else if($$[$0-2] !== undefined) this.$ = [$$[$0-2],$$[$0]]
         else error("error at `expression ','` ",$$[$0-2],$$[$0]) 
      
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,10:8,12:7,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},{1:[3]},{5:[1,16],6:17,7:4,8:5,9:$V0,10:8,12:7,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},o($V7,[2,2]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),{13:19,14:22,16:18,19:$V8,20:$V9},{11:[1,23]},o($Va,[2,106]),{88:24,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},o($Va,[2,108]),o($Va,[2,109],{91:[1,25]}),o($Va,[2,111]),o($Va,[2,112]),o($Va,[2,113]),{1:[2,1]},o($V7,[2,3]),o($Vb,$Vc,{31:26,17:$Vd,20:$Ve,22:$Vf,28:$Vg}),{11:[2,8],15:[1,31]},o($Vh,[2,13]),{16:32,19:$V8,20:$V9},o($Vb,[2,9]),o($Vi,[2,7]),o($Va,[2,107]),o($Va,[2,110]),o($V7,[2,27]),{19:$Vj,20:$Vk,23:33,24:[1,34],53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:35},{12:56,19:[1,55],21:[1,53],25:51,26:52,32:54,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},{18:57,19:$Vj,20:$Vk,27:58,28:$Vt,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},{8:71,10:8,11:$Vu,12:85,19:$Vj,20:$Vk,27:84,28:$Vg,30:[1,62],31:66,33:64,34:65,35:67,36:68,37:69,38:70,39:$Vv,41:$Vw,42:63,43:75,44:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},{14:86,16:87,19:$V8,20:$V9},{20:$Ve,21:[1,88],22:$Vf},{24:[1,89]},o($Vh,[2,16]),o([24,40],[2,105]),o($VF,[2,97],{63:$VG,64:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:[1,107],83:$VW,85:[1,90]}),o($VX,$VY),o($VZ,[2,70],{20:[1,110],22:[1,109],58:[1,111],59:[1,112],60:[1,113]}),{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:114,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:115,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:116,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($V_,[2,61]),o($V$,[2,74]),o($V$,[2,75]),o($V$,[2,76]),o($V$,[2,77]),o($V_,[2,57]),o($V_,[2,58]),o($V_,[2,59]),{19:$Vj,20:$Vk,27:84,43:117,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},{15:[1,119],21:[1,118]},{15:[1,121],21:[1,120]},o($Vh,[2,19]),o($V01,[2,28]),o($V01,[2,20]),{16:122,19:$V8,20:$V9},o($Vb,[2,12]),o($V11,[2,22]),{18:124,19:$Vj,20:$Vk,27:58,28:$Vt,29:123,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},o($VF,[2,99]),o($VX,$VY,{86:125,17:[1,126],87:[1,127]}),o($Vi,[2,40]),{8:71,10:8,11:$Vu,12:85,19:$Vj,20:$Vk,27:84,28:$Vg,30:[1,128],31:66,33:129,34:65,35:67,36:68,37:69,38:70,39:$Vv,41:$Vw,43:75,44:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},o($V21,[2,42]),o($V31,[2,31]),o($V31,[2,32]),o($V31,[2,33]),o($V31,[2,34]),o($V31,[2,35]),o($V31,[2,36]),o($V31,[2,37]),{19:$Vj,20:$Vk,23:130,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:35},{40:[1,131]},o($V41,[2,44]),{11:[1,132],15:$V51},{20:[1,134]},{20:[1,135]},{20:[1,136]},{8:71,10:8,11:$Vu,12:85,19:$Vj,20:$Vk,27:84,28:$Vg,31:66,33:137,34:65,35:67,36:68,37:69,38:70,39:$Vv,41:$Vw,43:75,44:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},{20:[1,138]},{11:[1,139]},{11:[1,140]},{11:[1,141],19:$Vj,20:$Vk,27:84,43:142,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},o($V61,[2,103]),{13:19,14:22,16:87,19:$V8,20:$V9},o($Vb,[2,10]),o($Vb,$Vc,{17:$Vd,20:$Ve,22:$Vf}),o($Vh,[2,14]),o($Vh,[2,15]),{19:$Vj,20:$Vk,27:84,43:143,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:144},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:145},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:146},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:147},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:148},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:149},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:150},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:151},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:152},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:153},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:154},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:155},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:156},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:157},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:158},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:159},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:160},{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:161},{19:$Vj,20:$Vk,27:84,43:162,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},{19:$Vj,20:$Vk,21:[1,163],27:165,53:42,54:$Vl,55:$Vm,56:38,57:164,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},{19:[1,166]},o($V_,[2,66]),o($V_,[2,67]),o($VZ,[2,71]),o($VZ,[2,72]),o($VZ,[2,73]),{15:$V51,21:[1,167]},o($Vh,[2,17]),{12:56,32:168,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},o($Vh,[2,18]),{19:[1,169]},o($V01,[2,30],{20:$Ve,22:$Vf}),{15:[1,171],30:[1,170]},o($V71,[2,25]),{19:$Vj,20:$Vk,27:172,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},o($V$,[2,101]),o($V$,[2,102]),o($Vi,[2,41]),o($V21,[2,43]),{40:[1,173]},{8:71,10:8,11:$Vu,12:85,19:$Vj,20:$Vk,27:84,28:$Vg,31:66,33:174,34:65,35:67,36:68,37:69,38:70,39:$Vv,41:$Vw,43:75,44:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},o($V41,[2,45]),{19:$Vj,20:$Vk,27:175,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},{19:$Vj,20:$Vk,27:84,43:176,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},{19:$Vj,20:$Vk,27:84,43:177,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},{19:$Vj,20:$Vk,27:84,43:178,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},{47:[1,179]},{11:$Vu,19:$Vj,20:$Vk,27:84,35:180,43:75,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},o($V31,[2,53]),o($V31,[2,54]),o($V31,[2,55]),{11:[1,181],15:$V51},{15:$V51,40:[1,182]},o($VX,[2,79]),o($VX,[2,80]),o($V81,[2,81],{68:$VI,69:$VJ,70:$VK}),o($V81,[2,82],{68:$VI,69:$VJ,70:$VK}),o($VX,[2,83]),o([11,15,21,24,30,40,71,72,82,83,85],[2,84],{63:$VG,64:$VH,68:$VI,69:$VJ,70:$VK,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV}),o([11,15,21,24,30,40,72,82,83,85],[2,85],{63:$VG,64:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV}),o([11,15,21,24,30,40,71,72,73,82,83,85],[2,86],{63:$VG,64:$VH,68:$VI,69:$VJ,70:$VK,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV}),o($V91,[2,87],{63:$VG,64:$VH,68:$VI,69:$VJ,70:$VK,80:$VU,81:$VV}),o($V91,[2,88],{63:$VG,64:$VH,68:$VI,69:$VJ,70:$VK,80:$VU,81:$VV}),o($V91,[2,89],{63:$VG,64:$VH,68:$VI,69:$VJ,70:$VK,80:$VU,81:$VV}),o($V91,[2,90],{63:$VG,64:$VH,68:$VI,69:$VJ,70:$VK,80:$VU,81:$VV}),o($Va1,[2,91],{63:$VG,64:$VH,68:$VI,69:$VJ,70:$VK,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VU,81:$VV}),o($Va1,[2,92],{63:$VG,64:$VH,68:$VI,69:$VJ,70:$VK,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VU,81:$VV}),o($Vb1,[2,93],{63:$VG,64:$VH,68:$VI,69:$VJ,70:$VK}),o($Vb1,[2,94],{63:$VG,64:$VH,68:$VI,69:$VJ,70:$VK}),o([11,15,21,24,30,40,82,85],[2,95],{63:$VG,64:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,83:$VW}),o([11,15,21,24,30,40,82,83,85],[2,96],{63:$VG,64:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV}),{15:$V51,24:[1,183]},o($V_,[2,63]),{15:[1,185],21:[1,184]},o($V01,[2,68]),o($V_,[2,65]),o($V_,[2,60]),o($V01,[2,29]),o($V01,[2,21]),o($V11,[2,23]),{18:187,19:$Vj,20:$Vk,27:58,28:$Vt,30:[1,186],53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},o($VF,[2,100]),{8:71,10:8,11:$Vu,12:85,19:$Vj,20:$Vk,27:84,28:$Vg,31:66,33:188,34:65,35:67,36:68,37:69,38:70,39:$Vv,41:$Vw,43:75,44:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},o($V31,[2,39]),o($V61,[2,104]),{15:$V51,21:[1,189]},{15:$V51,21:[1,190]},{15:$V51,21:[1,191]},{20:[1,192]},{11:$Vu,19:$Vj,20:$Vk,27:84,35:193,43:75,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},o($V31,[2,56]),{19:$Vj,20:$Vk,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:37,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:194},o($V_,[2,62]),o($V_,[2,64]),{19:$Vj,20:$Vk,27:195,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},o($V11,[2,24]),o($V71,[2,26]),o($V31,[2,38]),{8:71,10:8,11:$Vu,12:85,19:$Vj,20:$Vk,27:84,28:$Vg,31:66,33:196,34:65,35:67,36:68,37:69,38:70,39:$Vv,41:$Vw,43:75,44:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},{8:71,10:8,11:$Vu,12:85,19:$Vj,20:$Vk,27:84,28:$Vg,31:66,33:197,34:65,35:67,36:68,37:69,38:70,39:$Vv,41:$Vw,43:75,44:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},{8:71,10:8,11:$Vu,12:85,19:$Vj,20:$Vk,27:84,28:$Vg,31:66,33:198,34:65,35:67,36:68,37:69,38:70,39:$Vv,41:$Vw,43:75,44:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},{19:$Vj,20:$Vk,27:84,43:199,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},{19:$Vj,20:$Vk,21:[1,200],27:84,43:201,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60},o($VF,[2,98]),o($V01,[2,69]),o($V21,[2,46],{45:[1,202]}),o($V31,[2,48]),o($V31,[2,49]),{15:$V51,21:[1,203]},{8:71,10:8,11:$Vu,12:85,19:$Vj,20:$Vk,27:84,28:$Vg,31:66,33:204,34:65,35:67,36:68,37:69,38:70,39:$Vv,41:$Vw,43:75,44:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},{15:$V51,21:[1,205]},{8:71,10:8,11:$Vu,12:85,19:$Vj,20:$Vk,27:84,28:$Vg,31:66,33:206,34:65,35:67,36:68,37:69,38:70,39:$Vv,41:$Vw,43:75,44:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},{11:[1,207]},o($V31,[2,51]),{8:71,10:8,11:$Vu,12:85,19:$Vj,20:$Vk,27:84,28:$Vg,31:66,33:208,34:65,35:67,36:68,37:69,38:70,39:$Vv,41:$Vw,43:75,44:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:42,54:$Vl,55:$Vm,56:38,59:$Vn,60:$Vo,61:61,62:41,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:36,84:60,88:9,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5,94:$V6},o($V31,[2,47]),o($V31,[2,50]),o($V31,[2,52])],
defaultActions: {16:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip Annotation */
break;
case 2:/* ignore comment */
break;
case 3:return 54
break;
case 4:return 55
break;
case 5:return 94
break;
case 6:return 90
break;
case 7:return 93
break;
case 8:return 92
break;
case 9:return 91
break;
case 10:return 89
break;
case 11:return 'DEFINE'
break;
case 12:return 47
break;
case 13:return 49
break;
case 14:return 51
break;
case 15:return 50
break;
case 16:return 46
break;
case 17:return 39
break;
case 18:return 41
break;
case 19:return 44
break;
case 20:return 45
break;
case 21:return 48
break;
case 22:return 52
break;
case 23:return 'COMPOSITE'
break;
case 24:return 'INPUT'
break;
case 25:return 'OUTPUT'
break;
case 26:return 'STREAM'
break;
case 27:return 'FILEREADER'
break;
case 28:return 'FILEWRITER'
break;
case 29:return 'ADD'
break;
case 30:return 'PARAM'
break;
case 31:return 'INIT'
break;
case 32:return 'WORK'
break;
case 33:return 'WINDOW'
break;
case 34:return 'TUMBLING'
break;
case 35:return 'SLIDING'
break;
case 36:return 'SPLITJOIN'
break;
case 37:return 'PIPELINE'
break;
case 38:return 'SPLIT'
break;
case 39:return 'JOIN'
break;
case 40:return 'DUPLICATE'
break;
case 41:return 'ROUNDROBIN'
break;
case 42:return 19
break;
case 43:return yy_.yytext
break;
case 44:return 87
break;
case 45:return yy_.yytext
break;
case 46:return 5
break;
case 47:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\*([^\*]|(\*)*[^\*\/])*(\*)*\*\/)/,/^(?:\/\/.*)/,/^(?:(0[xb])?[0-9]+(\.[0-9]+)?([Ee][+-]?[0-9]+?)?\b)/,/^(?:('[^']*'|"[^\"]*"))/,/^(?:string\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:long\b)/,/^(?:const\b)/,/^(?:define\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:do\b)/,/^(?:return\b)/,/^(?:composite\b)/,/^(?:input\b)/,/^(?:output\b)/,/^(?:stream\b)/,/^(?:FileReader\b)/,/^(?:FileWriter\b)/,/^(?:add\b)/,/^(?:param\b)/,/^(?:init\b)/,/^(?:work\b)/,/^(?:window\b)/,/^(?:tumbling\b)/,/^(?:sliding\b)/,/^(?:splitjoin\b)/,/^(?:pipeline\b)/,/^(?:split\b)/,/^(?:join\b)/,/^(?:duplicate\b)/,/^(?:roundrobin\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:##|\+\+|--|>>|>>|<=|>=|==|!=|&&|\|\|)/,/^(?:\*=|\/=|\+=|-=|<<=|>>=|&=|\^=|\|=)/,/^(?:[-*+\/%&|~!()\[\]{}'"#,\.?:;<>=])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}