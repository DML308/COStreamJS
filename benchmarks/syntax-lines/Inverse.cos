double A[100][100];
int N = 100;    //测试矩阵维数定义, 求逆矩阵程序来自https://www.cnblogs.com/xiaoxi666/p/6421228.html

//按第一行展开计算|A|
double getA(double arcs[N][N],int n){
    if(n==1){
         return arcs[0][0];
     }
    double ans = 0;
    double temp[N][N]={0.0};
    int i,j,k;
    for(i=0;i<n;i++){
        for(j=0;j<n-1;j++){
            for(k=0;k<n-1;k++){
                temp[j][k] = arcs[j+1][(k>=i)?k+1:k];
            }
        }
        double t = getA(temp,n-1);
        if(i%2==0){
            ans += arcs[0][i]*t;
        }
        else{
            ans -= arcs[0][i]*t;
        }
    }
    return ans;
 }
 
 //计算每一行每一列的每个元素所对应的余子式，组成A*
 int getAStart(double arcs[N][N],int n,double ans[N][N]){
     if(n==1){
         ans[0][0] = 1;
         return;
     }
     int i,j,k,t;
     double temp[N][N];
     for(i=0;i<n;i++){
         for(j=0;j<n;j++){
             for(k=0;k<n-1;k++){
                 for(t=0;t<n-1;t++){
                     temp[k][t] = arcs[k>=i?k+1:k][t>=j?t+1:t];
                 }
             }
             
             ans[j][i]  =  getA(temp,n-1);  //此处顺便进行了转置
             if((i+j)%2 == 1){
                 ans[j][i] = - ans[j][i];
             }
         }
     }
     return 0;
 }
 
 //得到给定矩阵src的逆矩阵保存到des中。
 int GetMatrixInverse(double src[N][N],int n,double des[N][N]){
     double flag=getA(src,n);
     double t[N][N];
     if(0==flag){
         cout<< "原矩阵行列式为0，无法求逆。请重新运行" <<endl;
         return false;//如果算出矩阵的行列式为0，则不往下进行
     }
     else{
         getAStart(src,n,t);
         for(int i=0;i<n;i++){
             for(int j=0;j<n;j++){
                 des[i][j]=t[i][j]/flag;
             }
             
         }
     }
     return 1;
 }
composite Main(){
    stream<double x>S1;
    S1=First(){
        work{
            int i,j,k;
            double res[100][100];
            GetMatrixInverse(A,100,)
            for(i=0;i<100;i++){
                for(j=0;j<100;j++){
                    S1[i*100+j].x = res[i][j];
                }
            }
        }
        window{
            S1 tumbling(100*100);
        }
    };
    Sink(S1){
        work{}
        window{
            S1 sliding(1,1);
        }
    }
}