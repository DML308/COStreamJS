double _weight_3[400][10];
double _weight_1[784][400];
double data7[784]={
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,185,159,151,60,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,222,254,254,254,254,241,198,198,198,198,198,198,198,198,170,52,0,0,0,0,0,0,0,0,0,0,0,0,67,114,72,114,163,227,254,225,254,254,254,250,229,254,254,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,66,14,67,67,67,59,21,236,254,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,253,209,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,233,255,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,254,238,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,249,254,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,254,187,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,205,248,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,254,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,251,240,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,221,254,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,203,254,219,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,254,254,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,224,254,115,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,254,254,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,242,254,254,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,254,254,219,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,254,207,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};
double rate7[10]={
  0,0,0,0,0,0,0,1,0,0
};
double data4[784]={
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,224,0,0,0,0,0,0,0,70,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,231,0,0,0,0,0,0,0,148,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,195,231,0,0,0,0,0,0,0,96,210,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,252,134,0,0,0,0,0,0,0,114,252,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,236,217,12,0,0,0,0,0,0,0,192,252,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,247,53,0,0,0,0,0,0,0,18,255,253,21,0,0,0,0,0,0,0,0,0,0,0,0,0,84,242,211,0,0,0,0,0,0,0,0,141,253,189,5,0,0,0,0,0,0,0,0,0,0,0,0,0,169,252,106,0,0,0,0,0,0,0,32,232,250,66,0,0,0,0,0,0,0,0,0,0,0,0,0,15,225,252,0,0,0,0,0,0,0,0,134,252,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,252,164,0,0,0,0,0,0,0,0,169,252,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,204,209,18,0,0,0,0,0,0,22,253,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,252,199,85,85,85,85,129,164,195,252,252,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,170,245,252,252,252,252,232,231,251,252,252,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,84,84,84,84,0,0,161,252,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,252,252,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,252,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,252,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,236,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};
double rate4[10]={
  0,0,0,0,1,0,0,0,0,0
};
double data2[784]={
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,125,171,255,255,150,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,253,253,253,253,253,253,218,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,253,253,253,213,142,176,253,253,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,250,253,210,32,12,0,6,206,253,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,251,210,25,0,0,0,122,248,253,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,18,0,0,0,0,209,253,253,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,247,253,198,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,247,253,231,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,253,253,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,246,253,159,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,234,253,233,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,253,253,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,248,253,189,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,200,253,253,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,253,253,173,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,253,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,253,43,20,20,20,20,5,0,5,20,20,37,150,150,150,147,10,0,0,0,0,0,0,0,0,0,248,253,253,253,253,253,253,253,168,143,166,253,253,253,253,253,253,253,123,0,0,0,0,0,0,0,0,0,174,253,253,253,253,253,253,253,253,253,253,253,249,247,247,169,117,117,57,0,0,0,0,0,0,0,0,0,0,118,123,123,123,166,253,253,253,155,123,123,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};
double rate2[10]={
  0,0,1,0,0,0,0,0,0,0
};
int flag=0;


composite dense_1(input stream<double x>In, output stream<double x>Out){
  Out=dense_1(In){
    init{
      int i, j;
      for(i=0;i<784;i++){
        for(j=0;j<400;j++){
          _weight_1[i][j]=random()-0.5;
        }
        
      }
      
    }
    work{
      int i, j;
      double temp;
      for(j=0;j<400;j++){
        temp=0;
        for(i=0;i<784;i++){
          temp+=In[i].x*_weight_1[i][j];
        }
        
        Out[j].x=temp;
      }
      
    }
    window{
      In sliding(784,784);
      Out tumbling(400,400);
    }
  }
  ;
}

composite Activation_2(input stream<double x>In, output stream<double x>out0,stream<double x>out1,stream<double x>derivative){
  (out0,out1,derivative)=activation_sigmoid_2(In){
    init{
    }
    work{
      int i;
      double res;
      for(i=0;i<400;i++){
        res=1/(1+exp(-In[i].x));
        out0[i].x=res;
        out1[i].x=res;
        derivative[i].x=res*(1-res);
      }
      
    }
    window{
      In sliding(400,400);
      out0 tumbling(400,400);
      out1 tumbling(400,400);
      derivative tumbling(400,400);
    }
  }
  ;
}

composite dense_3(input stream<double x>In, output stream<double x>Out){
  Out=dense_3(In){
    init{
      int i, j;
      for(i=0;i<400;i++){
        for(j=0;j<10;j++){
          _weight_3[i][j]=random()-0.5;
        }
        
      }
      
    }
    work{
      int i, j;
      double temp;
      for(j=0;j<10;j++){
        temp=0;
        for(i=0;i<400;i++){
          temp+=In[i].x*_weight_3[i][j];
        }
        
        Out[j].x=temp;
      }
      
    }
    window{
      In sliding(400,400);
      Out tumbling(10,10);
    }
  }
  ;
}

composite Activation_4(input stream<double x>In, output stream<double x>out0,stream<double x>derivative){
  (out0,derivative)=activation_sigmoid_4(In){
    init{
    }
    work{
      int i;
      double res;
      for(i=0;i<10;i++){
        res=1/(1+exp(-In[i].x));
        out0[i].x=res;
        derivative[i].x=res*(1-res);
      }
      
    }
    window{
      In sliding(10,10);
      out0 tumbling(10,10);
      derivative tumbling(10,10);
    }
  }
  ;
}

composite loss(input stream<double x>In0,stream<double x>In1, output stream<double x>Out){
  Out=loss(In0,In1){
    init{
    }
    work{
      int i;
      for(i=0;i<10;i++){
        Out[i].x=In0[i].x-In1[i].x;
      }
      
    }
    window{
      In0 sliding(10,10);
      In1 sliding(10,10);
      Out tumbling(10,10);
    }
  }
  ;
}

composite DActivation_4(input stream<double x>error,stream<double x>In, output stream<double x>out){
  out=dActivation_sigmoid_4(error,In){
    init{
    }
    work{
      int i;
      for(i=0;i<10;i++){
        out[i].x=error[i].x*In[i].x;
      }
      
    }
    window{
      In sliding(10,10);
      error sliding(10,10);
      out tumbling(10,10);
    }
  }
  ;
}

composite dDense_3(input stream<double x>In0,stream<double x>In1, output stream<double x>Out){
  Out=dDense3(In0,In1){
    init{
    }
    work{
      int i, j;
      double temp=0;
      for(i=0;i<400;i++){
        temp=0;
        for(j=0;j<10;j++){
          temp+=In0[j].x*_weight_3[i][j];
        }
        
        Out[i].x=temp;
      }
      
      double lr=0.1;
      for(i=0;i<400;i++){
        for(j=0;j<10;j++){
          _weight_3[i][j]=_weight_3[i][j]-In0[j].x*In1[i].x*lr;
        }
        
      }
      
    }
    window{
      In0 sliding(10,10);
      In1 sliding(400,400);
      Out tumbling(400,400);
    }
  }
  ;
}

composite DActivation_2(input stream<double x>error,stream<double x>In, output stream<double x>out){
  out=dActivation_sigmoid_2(error,In){
    init{
    }
    work{
      int i;
      for(i=0;i<400;i++){
        out[i].x=error[i].x*In[i].x;
      }
      
    }
    window{
      In sliding(400,400);
      error sliding(400,400);
      out tumbling(400,400);
    }
  }
  ;
}

composite dDense_1(input stream<double x>In0,stream<double x>In1, output stream<double x>Out){
  Out=dDense1(In0,In1){
    init{
    }
    work{
      int i, j;
      double temp=0;
      for(i=0;i<784;i++){
        temp=0;
        for(j=0;j<400;j++){
          temp+=In0[j].x*_weight_1[i][j];
        }
        
        Out[i].x=temp;
      }
      
      double lr=0.1;
      for(i=0;i<784;i++){
        for(j=0;j<400;j++){
          _weight_1[i][j]=_weight_1[i][j]-In0[j].x*In1[i].x*lr;
        }
        
      }
      
    }
    window{
      In0 sliding(400,400);
      In1 sliding(784,784);
      Out tumbling(784,784);
    }
  }
  ;
}

composite squential_0(input stream<double x>In,stream<double x>Y, output stream<double x>Out){
  stream<double x> copy_1, copy_2, F1_F2, F2_F3, F2_B3, F2_B2, F3_F4, F4_loss, F4_B4, _Loss, B4_B3, B3_B2, B2_B1;
  (copy_1,copy_2)=_copy(In){
    work{
      copy_1[0].x=In[0].x;
      copy_2[0].x=In[0].x;
    }
    window{
      In sliding(1,1);
      copy_1 tumbling(1);
      copy_2 tumbling(1);
    }
  }
  ;
  (F1_F2)=dense_1(copy_1)();
  (F2_F3,F2_B3,F2_B2)=Activation_2(F1_F2)();
  (F3_F4)=dense_3(F2_F3)();
  (F4_loss,F4_B4)=Activation_4(F3_F4)();
  _Loss=loss(F4_loss,Y)();
  (B4_B3)=DActivation_4(_Loss,F4_B4)();
  (B3_B2)=dDense_3(B4_B3,F2_B3)();
  (B2_B1)=DActivation_2(B3_B2,F2_B2)();
  (Out)=dDense_1(B2_B1,copy_2)();
}

composite Main(){
    stream<double x> In, Out, Y;
    (In,Y)=Start(){
      int i=0;
      work{
        if(flag%3==0){
          for(i=0;i<784;i++)In[i].x=data7[i]/255+0.01;
          for(i=0;i<10;i++)Y[i].x=rate7[i];
        }
        else if(flag%3==1){
          for(i=0;i<784;i++)In[i].x=data4[i]/255+0.01;
          for(i=0;i<10;i++)Y[i].x=rate4[i];
        }
        else {
          for(i=0;i<784;i++)In[i].x=data2[i]/255+0.01;
          for(i=0;i<10;i++)Y[i].x=rate2[i];
        }
        
        flag++;
      }
      window{
        In tumbling(784);
        Y tumbling(10);
      }
    }
    ;
    Out=squential_0(In,Y)();
    sink(Out){
      work{
      }
      window{
        Out sliding(784,784);
      }
    }
    ;
  }